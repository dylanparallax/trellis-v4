// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // For schema migrations
}

model School {
  id                String   @id @default(cuid())
  name              String
  district          String?
  settings          Json     @default("{}")
  evaluationFramework Json   // School's rubric/framework
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  users             User[]
  teachers          Teacher[]
  observations      Observation[]
  evaluations       Evaluation[]
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  name              String
  role              Role     @default(EVALUATOR)
  schoolId          String
  school            School   @relation(fields: [schoolId], references: [id])
  // Optional link to Teacher record when this user is a teacher
  teacherId         String?
  teacher           Teacher? @relation(fields: [teacherId], references: [id])
  
  observations      Observation[]
  evaluations       Evaluation[]
  createdAt         DateTime @default(now())

  @@unique([teacherId])
}

enum Role {
  ADMIN
  EVALUATOR
  DISTRICT_ADMIN
  TEACHER
}

model Teacher {
  id                String   @id @default(cuid())
  name              String
  email             String?  @unique
  subject           String?
  gradeLevel        String?
  photoUrl          String?  // URL to teacher's photo
  schoolId          String
  school            School   @relation(fields: [schoolId], references: [id])
  // Back-reference to User when the teacher has a login
  user              User?
  
  // Performance tracking
  performanceHistory Json    @default("[]")
  currentGoals      Json     @default("[]")
  strengths         String[]
  growthAreas       String[]
  departments       String[] @default([])
  tenureStatus      TenureStatus?
  
  observations      Observation[]
  evaluations       Evaluation[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Observation {
  id                String   @id @default(cuid())
  teacherId         String
  teacher           Teacher  @relation(fields: [teacherId], references: [id])
  observerId        String
  observer          User     @relation(fields: [observerId], references: [id])
  schoolId          String
  school            School   @relation(fields: [schoolId], references: [id])
  
  // Raw observation data
  rawNotes          String   @db.Text
  enhancedNotes     String?  @db.Text
  
  // Structured data
  date              DateTime
  duration          Int?     // minutes
  observationType   ObservationType
  subject           String?
  focusAreas        String[]
  
  artifacts         ObservationArtifact[]
  createdAt         DateTime @default(now())
  
  @@index([teacherId])
  @@index([schoolId, createdAt])
}

enum ObservationType {
  FORMAL
  INFORMAL
  WALKTHROUGH
  OTHER
}

enum TenureStatus {
  TEMPORARY
  PROBATIONARY
  PERMANENT
}

model ObservationArtifact {
  id                String   @id @default(cuid())
  observationId     String
  observation       Observation @relation(fields: [observationId], references: [id])
  
  fileName          String
  fileUrl           String
  fileType          String
  ocrText           String?  @db.Text
  processedData     Json?
  
  createdAt         DateTime @default(now())
}

model Evaluation {
  id                String   @id @default(cuid())
  teacherId         String
  teacher           Teacher  @relation(fields: [teacherId], references: [id])
  evaluatorId       String
  evaluator         User     @relation(fields: [evaluatorId], references: [id])
  schoolId          String
  school            School   @relation(fields: [schoolId], references: [id])
  
  type              EvaluationType
  status            EvaluationStatus @default(DRAFT)
  
  // Content
  content           Json     // Structured evaluation data
  summary           String?  @db.Text
  recommendations   String[] 
  nextSteps         String[]
  
  // Metrics (based on school framework)
  scores            Json
  
  submittedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([teacherId])
  @@index([schoolId, createdAt])
}

enum EvaluationType {
  FORMATIVE
  SUMMATIVE
  MID_YEAR
  END_YEAR
}

enum EvaluationStatus {
  DRAFT
  SUBMITTED
  ACKNOWLEDGED
} 

// ---------------------------------------------
// RAG (Retrieval-Augmented Generation) Schema
// ---------------------------------------------

enum RagSourceType {
  OBSERVATION
  EVALUATION
}

model RagChunk {
  id           String        @id @default(cuid())
  sourceType   RagSourceType
  sourceId     String
  // Scope
  schoolId     String
  // We store the district name/code from School.district for scoping across schools
  district     String?
  
  // Content and embedding
  content      String        @db.Text
  contentHash  String        @unique
  tokenCount   Int
  // Store embedding as Postgres float8[] (Prisma Float[])
  embedding    Float[]
  metadata     Json          @default("{}")
  
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([schoolId, createdAt])
  @@index([district])
  @@index([sourceType, sourceId])
}

model RagIndexQueue {
  id           String        @id @default(cuid())
  action       RagQueueAction
  sourceType   RagSourceType
  sourceId     String
  createdAt    DateTime      @default(now())
  attemptCount Int           @default(0)
}

enum RagQueueAction {
  UPSERT
  DELETE
}

model RagConversation {
  id         String   @id @default(cuid())
  userId     String
  role       Role
  schoolId   String?
  district   String?
  settings   Json     @default("{}")
  createdAt  DateTime @default(now())
  messages   RagMessage[]

  @@index([userId, createdAt])
}

model RagMessage {
  id              String          @id @default(cuid())
  conversationId  String
  conversation    RagConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role            String          // 'user' | 'assistant' | 'system'
  content         String          @db.Text
  citations       Json?
  tokenCount      Int?
  createdAt       DateTime        @default(now())

  @@index([conversationId, createdAt])
}